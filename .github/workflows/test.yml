name: test
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
on:
  pull_request: { types: [opened, reopened, synchronize, ready_for_review] }
  push: { branches: [ main ] }
  
env:
  LOG_LEVEL: info
  SWIFT_DETERMINISTIC_HASHING: 1
  POSTGRES_HOSTNAME: 'psql-a'
  POSTGRES_HOSTNAME_A: 'psql-a'
  POSTGRES_HOSTNAME_B: 'psql-b'
  POSTGRES_DB: 'test_database'
  POSTGRES_DB_A: 'test_database'
  POSTGRES_DB_B: 'test_database'
  POSTGRES_USER: 'test_username'
  POSTGRES_USER_A: 'test_username'
  POSTGRES_USER_B: 'test_username'
  POSTGRES_PASSWORD: 'test_password'
  POSTGRES_PASSWORD_A: 'test_password'
  POSTGRES_PASSWORD_B: 'test_password'

jobs:
  # Check for API breakage versus main
  api-breakage:
    if: ${{ !(github.event.pull_request.draft || false) }}
    runs-on: ubuntu-latest
    container: swift:jammy
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with: { 'fetch-depth': 0 }
      - name: Run API breakage check action
        uses: vapor/ci/.github/actions/ci-swift-check-api-breakage@main

  code-coverage:
    if: ${{ !(github.event.pull_request.draft || false) }}
    runs-on: ubuntu-latest
    container: swift:jammy
    services:
      psql-a:
        image: postgres:15
        env:
          POSTGRES_USER: test_username
          POSTGRES_DB: test_database
          POSTGRES_PASSWORD: test_password
          POSTGRES_HOST_AUTH_METHOD: scram-sha-256
          POSTGRES_INITDB_ARGS: --auth-host=scram-sha-256
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Run unit tests for coverage data
        run: swift test --enable-code-coverage
      - name: Upload coverage data
        uses: vapor/swift-codecov-action@v0.2
  
  gh-codeql:
    if: ${{ !(github.event.pull_request.draft || false) }}
    strategy:
      fail-fast: false
      matrix:
        runner_os:
          - ubuntu-latest
          - macos-13
    runs-on: ${{ matrix.runner_os }}
    permissions:
      security-events: write
    steps:
      - name: Select appropriate Xcode version
        if: ${{ startsWith(matrix.runner_os, 'macos') }}
        uses: maxim-lobanov/setup-xcode@v1
        with: { xcode-version: '~14.3' }
      - name: Check out code
        uses: actions/checkout@v3
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with: { languages: swift }
      - name: Perform build
        run: swift build
      - name: Run CodeQL analyze
        uses: github/codeql-action/analyze@v2

  linux-unit:
    if: ${{ !(github.event.pull_request.draft || false) }}
    strategy:
      fail-fast: false
      matrix:
        postgres-image:
          - postgres:15
          - postgres:13
          - postgres:11
        swift-image:
          - swift:5.7-jammy
          - swift:5.8-jammy
          - swiftlang/swift:nightly-5.9-jammy
          - swiftlang/swift:nightly-main-jammy
        include:
          - postgres-image: postgres:15
            postgres-auth: scram-sha-256
          - postgres-image: postgres:13
            postgres-auth: md5
          - postgres-image: postgres:11
            postgres-auth: trust
    runs-on: ubuntu-latest
    container: ${{ matrix.swift-image }}
    services:
      psql-a:
        image: ${{ matrix.postgres-image }}
        env:
          POSTGRES_USER: test_username
          POSTGRES_DB: test_database
          POSTGRES_PASSWORD: test_password
          POSTGRES_HOST_AUTH_METHOD: ${{ matrix.postgres-auth }}
          POSTGRES_INITDB_ARGS: --auth-host=${{ matrix.postgres-auth }}
    steps:
      - name: Check out package
        uses: actions/checkout@v3
      - name: Run local tests
        run: swift test

  linux-integration:
    if: ${{ !(github.event.pull_request.draft || false) }}
    runs-on: ubuntu-latest
    container: swift:5.8-jammy
    services:
      psql-a:
        image: postgres:15
        env:
          POSTGRES_USER: test_username
          POSTGRES_DB: test_database
          POSTGRES_PASSWORD: test_password
          POSTGRES_HOST_AUTH_METHOD: scram-sha-256
          POSTGRES_INITDB_ARGS: --auth-host=scram-sha-256
      psql-b:
        image: postgres:15
        env:
          POSTGRES_USER: test_username
          POSTGRES_DB: test_database
          POSTGRES_PASSWORD: test_password
          POSTGRES_HOST_AUTH_METHOD: scram-sha-256
          POSTGRES_INITDB_ARGS: --auth-host=scram-sha-256
    steps:
      - name: Check out package
        uses: actions/checkout@v3
        with: { path: 'postgres-kit' }
      - name: Check out fluent-postgres-driver dependent
        uses: actions/checkout@v3
        with: { repository: 'vapor/fluent-postgres-driver', path: 'fluent-postgres-driver' }
      - name: Use local package
        run: swift package --package-path fluent-postgres-driver edit postgres-kit --path postgres-kit
      - name: Run fluent-postgres-kit tests
        run: swift test --package-path fluent-postgres-driver

  macos-unit:
    if: ${{ !(github.event.pull_request.draft || false) }}
    strategy:
      fail-fast: false
      matrix:
        xcode-version:
          - '~14.3'
          - '15.0-beta'
    runs-on: macos-13
    env:
      POSTGRES_HOSTNAME: 127.0.0.1
      POSTGRES_DB: postgres
    steps:
      - name: Select latest available Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ matrix.xcode-version }}
      - name: Install Postgres, setup DB and auth, and wait for server start
        run: |
          export PATH="$(brew --prefix)/opt/postgresql@14/bin:$PATH" PGDATA=/tmp/vapor-postgres-test
          (brew unlink postgresql || true) && brew install "postgresql@14" && brew link --force "postgresql@14"
          initdb --locale=C --auth-host "scram-sha-256" -U "${POSTGRES_USER}" --pwfile=<(echo "${POSTGRES_PASSWORD}")
          pg_ctl start --wait
        timeout-minutes: 2
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run local tests
        run: swift test
